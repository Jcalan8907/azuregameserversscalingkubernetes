/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/dgkanatsios/azuregameserversscalingkubernetes/pkg/apis/azuregaming/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DedicatedGameServerCollectionLister helps list DedicatedGameServerCollections.
type DedicatedGameServerCollectionLister interface {
	// List lists all DedicatedGameServerCollections in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedGameServerCollection, err error)
	// DedicatedGameServerCollections returns an object that can list and get DedicatedGameServerCollections.
	DedicatedGameServerCollections(namespace string) DedicatedGameServerCollectionNamespaceLister
	DedicatedGameServerCollectionListerExpansion
}

// dedicatedGameServerCollectionLister implements the DedicatedGameServerCollectionLister interface.
type dedicatedGameServerCollectionLister struct {
	indexer cache.Indexer
}

// NewDedicatedGameServerCollectionLister returns a new DedicatedGameServerCollectionLister.
func NewDedicatedGameServerCollectionLister(indexer cache.Indexer) DedicatedGameServerCollectionLister {
	return &dedicatedGameServerCollectionLister{indexer: indexer}
}

// List lists all DedicatedGameServerCollections in the indexer.
func (s *dedicatedGameServerCollectionLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedGameServerCollection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedGameServerCollection))
	})
	return ret, err
}

// DedicatedGameServerCollections returns an object that can list and get DedicatedGameServerCollections.
func (s *dedicatedGameServerCollectionLister) DedicatedGameServerCollections(namespace string) DedicatedGameServerCollectionNamespaceLister {
	return dedicatedGameServerCollectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DedicatedGameServerCollectionNamespaceLister helps list and get DedicatedGameServerCollections.
type DedicatedGameServerCollectionNamespaceLister interface {
	// List lists all DedicatedGameServerCollections in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedGameServerCollection, err error)
	// Get retrieves the DedicatedGameServerCollection from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DedicatedGameServerCollection, error)
	DedicatedGameServerCollectionNamespaceListerExpansion
}

// dedicatedGameServerCollectionNamespaceLister implements the DedicatedGameServerCollectionNamespaceLister
// interface.
type dedicatedGameServerCollectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DedicatedGameServerCollections in the indexer for a given namespace.
func (s dedicatedGameServerCollectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedGameServerCollection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedGameServerCollection))
	})
	return ret, err
}

// Get retrieves the DedicatedGameServerCollection from the indexer for a given namespace and name.
func (s dedicatedGameServerCollectionNamespaceLister) Get(name string) (*v1alpha1.DedicatedGameServerCollection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dedicatedgameservercollection"), name)
	}
	return obj.(*v1alpha1.DedicatedGameServerCollection), nil
}
