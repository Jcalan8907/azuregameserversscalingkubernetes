/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/dgkanatsios/azuregameserversscalingkubernetes/shared/pkg/apis/multiplayergameserver/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiplayerGameServerLister helps list MultiplayerGameServers.
type MultiplayerGameServerLister interface {
	// List lists all MultiplayerGameServers in the indexer.
	List(selector labels.Selector) (ret []*v1.MultiplayerGameServer, err error)
	// MultiplayerGameServers returns an object that can list and get MultiplayerGameServers.
	MultiplayerGameServers(namespace string) MultiplayerGameServerNamespaceLister
	MultiplayerGameServerListerExpansion
}

// multiplayerGameServerLister implements the MultiplayerGameServerLister interface.
type multiplayerGameServerLister struct {
	indexer cache.Indexer
}

// NewMultiplayerGameServerLister returns a new MultiplayerGameServerLister.
func NewMultiplayerGameServerLister(indexer cache.Indexer) MultiplayerGameServerLister {
	return &multiplayerGameServerLister{indexer: indexer}
}

// List lists all MultiplayerGameServers in the indexer.
func (s *multiplayerGameServerLister) List(selector labels.Selector) (ret []*v1.MultiplayerGameServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MultiplayerGameServer))
	})
	return ret, err
}

// MultiplayerGameServers returns an object that can list and get MultiplayerGameServers.
func (s *multiplayerGameServerLister) MultiplayerGameServers(namespace string) MultiplayerGameServerNamespaceLister {
	return multiplayerGameServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiplayerGameServerNamespaceLister helps list and get MultiplayerGameServers.
type MultiplayerGameServerNamespaceLister interface {
	// List lists all MultiplayerGameServers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.MultiplayerGameServer, err error)
	// Get retrieves the MultiplayerGameServer from the indexer for a given namespace and name.
	Get(name string) (*v1.MultiplayerGameServer, error)
	MultiplayerGameServerNamespaceListerExpansion
}

// multiplayerGameServerNamespaceLister implements the MultiplayerGameServerNamespaceLister
// interface.
type multiplayerGameServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiplayerGameServers in the indexer for a given namespace.
func (s multiplayerGameServerNamespaceLister) List(selector labels.Selector) (ret []*v1.MultiplayerGameServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MultiplayerGameServer))
	})
	return ret, err
}

// Get retrieves the MultiplayerGameServer from the indexer for a given namespace and name.
func (s multiplayerGameServerNamespaceLister) Get(name string) (*v1.MultiplayerGameServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("multiplayergameserver"), name)
	}
	return obj.(*v1.MultiplayerGameServer), nil
}
